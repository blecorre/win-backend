openapi: 3.0.3
info:
  title: LPMS-server api
  description: lpms server api with auth
  version: 0.0.1
components:
  securitySchemes:
    bearerAuth:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
  schemas:
    AdultGuest:
      type: object
      required:
        - type
        - count
      properties:
        type:
          type: string
          enum: ['ADT']
        count:
          type: number
    ChildGuest:
      type: object
      required:
        - type
        - count
        - childrenAges
      properties:
        type:
          type: string
          enum: ['CHD']
        count:
          type: number
        childrenAges:
          type: array
          items:
            type: number

    Email:
      description: An email
      type: string
      pattern: '^.+?@.+\..+?$'
      example: contact@org.co.uk

    PhoneNumber:
      description: A phone number
      type: string
      pattern: '^\+[0-9]+$'
      example: "+32123456789"

    Name:
      description: First, middle or last name
      type: string
      minLength: 1
      maxLength: 42
      example: "Bob"

    Guest:
      description: A representation of a Guest
      type: object
      required: [ "type" ]
      properties:
        type:
          description: The Guest type code as per IATA definitions
          type: string
          minLength: 3
          maxLength: 3
          enum:
            - ADT # Adult (12+y)
            - CHD # Child (2-11y)
            - INF # Infant without a seat (<2y)
          example: ADT
        count:
          description: Number of associated Guests of the same type
          type: integer
          example: 2
          default: 1
        civility:
          description: The civility of the Guest
          type: string
          enum:
            - MR
            - MRS
          example: "MR"
        lastnames:
          description: The list of last names of this Guest
          type: array
          minItems: 1
          maxItems: 5
          items:
            $ref: "#/components/schemas/Name"
        firstnames:
          description: The list of first names of this Guest
          type: array
          minItems: 1
          maxItems: 5
          items:
            $ref: "#/components/schemas/Name"
        middlenames:
          description: The list of middle names of this Guest
          type: array
          minItems: 1
          maxItems: 5
          items:
            $ref: "#/components/schemas/Name"
        gender:
          description: The gender of the Guest
          type: string
          enum:
            - Male
            - Female
          example: Male
        birthdate:
          description: The birthdate of the Guest
          type: string
          format: date-time
          example: "1980-03-21"
        contactInformation:
          description: The contact informations of the Guest
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: "#/components/schemas/PhoneNumber"
              - $ref: "#/components/schemas/Email"
      example:
        {
          "type": "ADT",
          "lastnames": [ "Marley" ],
          "firstnames": [ "Bob" ],
          "gender": "Male",
          "birthdate": "1980-03-21",
          "contactInformation": [ "+32123456789", "contact@org.co.uk" ]
        }

servers:
  - url: http://localhost:5000/api
    description: local server
  - url: https://test-win-backend-api.win.so/api
    description: dev server

paths:
  #users
  /user/login:
    post:
      summary: get access token
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  description: user's login
                password:
                  type: string
                  description: user's password
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        500:
          description: Some server error

  /user/refresh:
    post:
      summary: refresh access token
      tags: [Auth service]
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        500:
          description: Some server error

  /user/get-all:
    get:
      summary: get all users
      tags: [Auth service]
      responses:
        200:
          description: get all users
        401:
          description: User is not Auth

  /user/create:
    post:
      security:
        - bearerAuth: []
      summary: create a new user (only for manager role)
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
                - roles
              properties:
                login:
                  type: string
                  description: user's login
                password:
                  type: string
                  description: user's password
                roles:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    enum: [manager, staff]
                  description: roles (staff, manager)
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /user/update-password:
    put:
      security:
        - bearerAuth: []
      summary: update password
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - password
              properties:
                userId:
                  type: string
                  description: user's id
                password:
                  type: string
                  description: new user password
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /user/update-roles:
    put:
      security:
        - bearerAuth: []
      summary: update role (only for manager role)
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roles
              properties:
                userId:
                  type: string
                  description: user's id
                roles:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    enum: [manager, staff]
                  description: roles (staff, manager)
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error
  /user:
    delete:
      security:
        - bearerAuth: []
      summary: delete user (only for manager role)
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: user's id
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        403:
          description: Access denied
        500:
          description: Some server error

  /user/logout:
    post:
      security:
        - bearerAuth: []
      summary: logout
      tags: [Auth service]
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error
  #end users

  #proxy
  /derby-soft/hotels:
    get:
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error

  /derby-soft/hotels/search:
    get:
      parameters:
        - in: query
          name: lon
          schema:
            type: number
            default: -77.387982
          required: true
        - in: query
          name: lat
          schema:
            type: number
            default: 34.748995
          required: true
        - in: query
          name: radius
          schema:
            type: number
            default: 2000
            maximum: 20000
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error

  /derby-soft/offers/search:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - accommodation
                - passengers
              properties:
                accommodation:
                  type: object
                  required:
                    - location
                    - arrival
                    - departure
                    - roomCount
                  properties:
                    location:
                      type: object
                      required:
                        - lon
                        - lat
                        - radius
                      properties:
                        lon:
                          type: number
                        lat:
                          type: number
                        radius:
                          type: number
                    arrival:
                      type: string
                      format: date-time
                    departure:
                      type: string
                      format: date-time
                    roomCount:
                      type: number
                passengers:
                  type: array
                  items:
                    oneOf:
                      - $ref: '#/components/schemas/AdultGuest'
                      - $ref: '#/components/schemas/ChildGuest'
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error

  /derby-soft/offers/{offerId}/price:
    post:
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
          required: true
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error
  #end proxy

  #booking
  /booking/{address}:
    get:
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error

  /booking/{offerId}/guests:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Guest'
              minItems: 1
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error
  #end booking

  #hotels
  /hotels:
    get:
      parameters:
        - in: query
          name: lon
          schema:
            type: number
          required: true
        - in: query
          name: lat
          schema:
            type: number
          required: true
        - in: query
          name: radius
          schema:
            type: number
      responses:
        200:
          description: It's ok
        400:
          description: Handled Error
        401:
          description: User is not Auth
        500:
          description: Some server error
  #end hotels

  #health
  /health:
    get:
      responses:
        200:
          description: It's ok
  #end health
