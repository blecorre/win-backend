openapi: 3.0.3
info:
  title: LPMS-server api
  description: lpms server api with auth
  version: 0.0.1
components:
  securitySchemes:
    bearerAuth:
      type: 'http'
      scheme: 'bearer'
      bearerFormat: 'JWT'
  schemas:
    AdultGuest:
      type: object
      required:
        - type
        - count
      properties:
        type:
          type: string
          enum: ['ADT']
        count:
          type: number
    ChildGuest:
      type: object
      required:
        - type
        - count
        - childrenAges
      properties:
        type:
          type: string
          enum: ['CHD']
        count:
          type: number
        childrenAges:
          type: array
          items:
            type: number

    Email:
      description: An email
      type: string
      format: email
      example: contact@org.co.uk

    PhoneNumber:
      description: A phone number
      type: string
      pattern: '(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)([2-9]1[02-9]‌​|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})\s*(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+)\s*)?$'
      example: '+32123456789'

    Name:
      description: First, middle or last name
      type: string
      minLength: 1
      maxLength: 42
      example: 'Bob'

    Guest:
      description: A representation of a Guest
      type: object
      required: ['type']
      properties:
        type:
          description: The Guest type code as per IATA definitions
          type: string
          minLength: 3
          maxLength: 3
          enum:
            - ADT # Adult (12+y)
            - CHD # Child (2-11y)
            - INF # Infant without a seat (<2y)
          example: ADT
        count:
          description: Number of associated Guests of the same type
          type: integer
          example: 2
          default: 1
        civility:
          description: The civility of the Guest
          type: string
          enum:
            - MR
            - MRS
          example: 'MR'
        lastnames:
          description: The list of last names of this Guest
          type: array
          minItems: 1
          maxItems: 5
          items:
            $ref: '#/components/schemas/Name'
        firstnames:
          description: The list of first names of this Guest
          type: array
          minItems: 1
          maxItems: 5
          items:
            $ref: '#/components/schemas/Name'
        middlenames:
          description: The list of middle names of this Guest
          type: array
          minItems: 1
          maxItems: 5
          items:
            $ref: '#/components/schemas/Name'
        gender:
          description: The gender of the Guest
          type: string
          enum:
            - Male
            - Female
          example: Male
        birthdate:
          description: The birthdate of the Guest
          type: string
          format: date-time
          example: '1980-03-21'
        contactInformation:
          description: The contact informations of the Guest
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/PhoneNumber'
              - $ref: '#/components/schemas/Email'
      example:
        {
          'type': 'ADT',
          'lastnames': ['Marley'],
          'firstnames': ['Bob'],
          'gender': 'Male',
          'birthdate': '1980-03-21',
          'contactInformation': ['+32123456789', 'contact@org.co.uk']
        }

    Amount:
      description: An amount
      type: number
      minLength: 1
      maxLength: 99
      example: '40.00'

    Currency:
      description: The ISO4217 currency code
      type: string
      pattern: '^[A-Z]{3}$'
      minLength: 3
      maxLength: 3
      example: 'EUR'

    Price:
      description: Price of the service
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
        private:
          description: The private price in currency decimals for this service that the distributor owes to the supplier.
          $ref: '#/components/schemas/Amount'
        public:
          description: The public price for this service. The distributor should sell the product at this price.
          $ref: '#/components/schemas/Amount'
        commission:
          description: The distributor commission for selling this service
          $ref: '#/components/schemas/Amount'
        taxes:
          description: The taxes to be collected when selling this service.
          $ref: '#/components/schemas/Amount'

    PricePlansReferences:
      description: Maps a price plan with the associated elements
      type: object
      additionalProperties:
        type: object
        properties:
          accommodation:
            description: reference of the accommodation
            type: string
            example: 'prov.1234'
          roomType:
            description: reference of the room type in the accommodation
            type: string
            example: 'ND'
      example: { 'BAR': { 'accommodation': 'prov.1234', 'roomType': 'ND' } }

    Offer:
      description: An offer object
      type: object
      properties:
        expiration:
          description: The offer expiration time. Once this time is reached, the booking of the offer is not possible anymore.
          type: string
          format: date-time
          example: '2021-04-12T23:20:50.52Z'
        price:
          $ref: '#/components/schemas/Price'
        pricePlansReferences:
          $ref: '#/components/schemas/PricePlansReferences'

    Media:
      type: array
      nullable: true
      items:
        type: object
        properties:
          type:
            type: string
            enum:
              - photo
              - video
          width:
            type: integer
          height:
            type: integer
          url:
            type: string
            format: url

    Location:
      description: An accommodation object
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: number

    AccommodationType:
      description: Type of accommodation service
      type: string
      maxLength: 24
      enum:
        - hotel
      example: 'hotel'

    ContactInformation:
      type: object
      properties:
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        address:
          type: object
          properties:
            streetAddress:
              description: address line
              type: string
              example: Maskingatan 11
            premise:
              type: string
              example: Gota Alv River
            locality:
              description: city name
              type: string
              example: Gothenburg
            postalCode:
              description: postal code
              type: string
              example: 417 64
            country:
              description: country
              type: string
              example: 'China'

    CheckInOutPolicy:
      description: The check-in and check-out time policy, format HH:MM
      type: object
      properties:
        checkinTime:
          type: string
          pattern: '^[0-9]{2}:[0-9]{2}$'
          example: '15:00'
        checkoutTime:
          type: string
          pattern: '^[0-9]{2}:[0-9]{2}$'
          example: '11:00'

    Roomtypes:
      description: A room type object
      type: object
      required:
        - name
        - description
        - amenities
        - size
        - maximumOccupancy
        - media
        - policies
      properties:
        name:
          description: The name of this room type
          type: string
          example: Twin beds
        description:
          description: A description of the room type
          type: string
          example: Standard twin rooms with two single beds
        amenities:
          description: The list of amenities available with this room type
          type: array
          items:
            type: object
            properties:
              otaCode:
                description: The OTA code for this amenity
                type: string
              name:
                description: The name of this amenity
                nullable: true
                type: string
              description:
                description: Description of the amenity
                nullable: true
                type: string
        size:
          description: the size of the room
          nullable: true
          type: object
          properties:
            value:
              description: The size value of this room
              type: number
              example: 15
            unit:
              description: The unit for this room size
              type: string
              enum:
                - metric
                - imperial
              example: metric
              default: metric
        maximumOccupancy:
          description: Maximum occupancy for this room type
          type: object
          properties:
            adults:
              type: integer
            children:
              type: integer
        media:
          $ref: '#/components/schemas/Media'
        policies:
          type: object
          additionalProperties:
            type: string

    Accommodation:
      description: An accommodation object
      type: object
      required:
        - hotelId
        - name
        - type
        - description
        - location
        - rating
        - contactInformation
        - checkinoutPolicy
        - otherPolicies
        - media
        - roomTypes
      properties:
        location:
          $ref: '#/components/schemas/Location'
        _id:
          description: mongo id of the hotel
          type: string
        id:
          description: uuid of the hotel (offer)
          type: string
        hotelId:
          description: Id of the hotel
          type: string
          example: 'GOH202'
        name:
          description: The name of the property or accommodation
          type: string
          example: Comfort Hotel Xpress Stockholm Central
        type:
          $ref: '#/components/schemas/AccommodationType'
        description:
          description: The description of the property
          type: string
        rating:
          description: The award rating as per country rules
          type: integer
          example: 3
        contactInformation:
          $ref: '#/components/schemas/ContactInformation'
        checkinoutPolicy:
          $ref: '#/components/schemas/CheckInOutPolicy'
        otherPolicies:
          type: array
          items:
            type: string
        media:
          $ref: '#/components/schemas/Media'
        roomTypes:
          description: Type of rooms available for this accommodation
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Roomtypes'

    PricePlan:
      description: Describes the attributes of the price plan
      type: object
      properties:
        name:
          description: The marketing name of this price plan
          type: string
          maxLength: 24
          example: 'Premium Economy'
        amenities:
          description: The amenities for this price plan
          type: array
          maxItems: 99
          items:
            type: string
            enum:
              - meal
              - wifi
              - lounge
              - fasttrack
              - priorityBoarding
              - seatSelection
            example: meal
        checkedBaggages:
          description: the list of checked checkedBaggages
          type: object
          properties:
            quantity:
              type: integer
              example: 2

    SearchResults:
      description: An object to return search results
      type: object
      nullable: true
      required:
        - offers
        - accommodations
      properties:
        # The proposed offers
        offers:
          description: The indexed list of offers
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Offer'

        accommodations:
          description: The accommodations matching an search request
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Accommodation'

        # The price plans involved in the offer
        pricePlans:
          description: The indexed list of price plans
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PricePlan'

        # The mapping of the passenger references
        passengers:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Guest'
          example:
            PAX1: { 'type': 'ADT' }

    OffersSearchProviderResponse:
      description: Response object obtained from the provider (DerbySoft or Rooms)
      type: object
      required:
        - data
        - status
      properties:
        data:
          $ref: '#/components/schemas/SearchResults'
        status:
          type: string

    UUID:
      description: Unique identifier for Offers and Orders
      type: string
      format: uuid
      minLength: 36
      maxLength: 36
      pattern: '^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$'
      example: '11111111-2222-3333-4444-000000000001'

    TaxItem:
      description: A tax item
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        code:
          type: string
          pattern: '^[A-Z0-9]{2}$'
          example: CA
        description:
          type: string
          example: Air Travellers Security Charge (ATSC)

    FareComponentItem:
      type: object
      properties:
        name:
          description: The name of the fare component
          type: string
          example: Basic
        basisCode:
          description: The Fare Basis code of the fare component
          type: string
          pattern: '^[A-Z0-9]+$'
          example: A30ZABA
        designator:
          description: The Reservation Booking Designator (RBD)
          type: string
          pattern: '^[A-Z]{1}$'
          example: A
        conditions:
          description: The fare conditions associated with the fare component
          type: string
          example: 'No flight changes are permitted.'

    FareItem:
      description: A fare item
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        description:
          type: string
          example: Navigation Surcharge
        usage:
          description: The usage of the fare item
          type: string
          enum:
            - base # Base Fare
            - surcharge # Surcharge
          default: base
        code:
          description: The optional code of the fare item
          type: string
          pattern: '^[A-Z0-9]{2}$'
          example: S1
        components:
          description: A fare component
          type: array
          items:
            $ref: '#/components/schemas/FareComponentItem'

    PriceItem:
      description: Detail of a priced item
      type: object
      properties:
        taxes:
          description: Taxes included in the price
          type: array
          items:
            $ref: '#/components/schemas/TaxItem'
        fare:
          description: Breakdown of the fare
          type: array
          items:
            $ref: '#/components/schemas/FareItem'

    Disclosures:
      description: List of disclosures
      nullable: true
      type: array
      items:
        type: array
        items:
          type: string
          nullable: true
          example: 'The seat charge is applicable to each one-way flight...'

    PricedOfferContent:
      type: object
      required:
        - expiration
        - price
        - pricedItems
        - disclosures
      properties:
        expiration:
          description: The offer expiration time.
          type: string
          format: date-time
          example: '2021-04-12T23:20:50.52Z'
        price:
          $ref: '#/components/schemas/Price'
        pricedItems:
          description: Breakdown of items priced
          type: array
          items:
            $ref: '#/components/schemas/PriceItem'
        disclosures:
          $ref: '#/components/schemas/Disclosures'

    PricedOffer:
      description: An offer with confirmed price
      type: object
      required:
        - offerId
        - offer
        - accommodation
        - provider
        - serviceId
      properties:
        offerId:
          $ref: '#/components/schemas/UUID'
        offer:
          $ref: '#/components/schemas/PricedOfferContent'
        accommodation:
          $ref: '#/components/schemas/Accommodation'
        provider:
          type: string
        serviceId:
          type: string

    OfferDbValue:
      description: offer in db structure
      type: object
      required:
        - _id
        - id
        - accommodation
        - pricedItems
        - disclosures
        - price
        - pricePlansReferences
        - expiration
        - arrival
        - departure
      properties:
        _id:
          type: string
        id:
          type: string
        accommodation:
          $ref: '#/components/schemas/Accommodation'
        pricedItems:
          type: array
          items:
            $ref: '#/components/schemas/PriceItem'
        disclosures:
          $ref: '#/components/schemas/Disclosures'
        price:
          $ref: '#/components/schemas/Price'
        pricePlansReferences:
          $ref: '#/components/schemas/PricePlansReferences'
        expiration:
          type: string
          format: date-time
        arrival:
          type: string
          format: date-time
        departure:
          type: string
          format: date-time

    Deal:
      description: db value of deal
      type: object
      required:
        - offer
        - offerId
        - createdAt
        - status
      properties:
        offer:
          $ref: '#/components/schemas/OfferDbValue'
        offerId:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum: ['paid', 'pending', 'booked', 'paymentError']
        message:
          type: string
        orderId:
          type: string

    OffersSearchRequest:
      description: Offers search request
      type: object
      required:
        - accommodation
        - passengers
      properties:
        accommodation:
          type: object
          required:
            - location
            - arrival
            - departure
            - roomCount
          properties:
            location:
              type: object
              required:
                - lon
                - lat
                - radius
              properties:
                lon:
                  type: number
                lat:
                  type: number
                radius:
                  type: number
            arrival:
              type: string
              format: date-time
            departure:
              type: string
              format: date-time
            roomCount:
              type: number
        passengers:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AdultGuest'
              - $ref: '#/components/schemas/ChildGuest'

    OffersSearchResponse:
      description: Offers search response
      type: object
      properties:
        data:
          type: object
          required:
            - rooms
            - derbySoft
          properties:
            rooms:
              $ref: '#/components/schemas/OffersSearchProviderResponse'
            derbySoft:
              $ref: '#/components/schemas/OffersSearchProviderResponse'
servers:
  - url: http://localhost:5000/api
    description: local server
  - url: https://test-win-backend-api.win.so/api
    description: dev server

paths:
  #users
  /user/login:
    post:
      summary: get access token
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  description: user's login
                password:
                  type: string
                  description: user's password
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - login
                  - roles
                  - accessToken
                  - refreshToken
                properties:
                  id:
                    type: string
                  login:
                    type: string
                  roles:
                    type: array
                    items:
                      type: string
                    minItems: 1
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
          description: It's ok
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /user/refresh:
    post:
      summary: refresh access token
      tags: [Auth service]
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                required:
                  - accessToken
                  - refreshToken
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /user/get-all:
    get:
      summary: get all users
      tags: [Auth service]
      responses:
        200:
          description: get all users
          content:
            application/json:
              schema:
                type: object
                required:
                  - users
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        login:
                          type: string
                        roles:
                          type: array
                          items:
                            type: string
                          minItems: 1
        401:
          description: User is not Auth

  /user/create:
    post:
      security:
        - bearerAuth: []
      summary: create a new user (only for manager role)
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
                - roles
              properties:
                login:
                  type: string
                  description: user's login
                password:
                  type: string
                  description: user's password
                roles:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    enum: [manager, staff]
                  description: roles (staff, manager)
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [true]
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /user/update-password:
    put:
      security:
        - bearerAuth: []
      summary: update password
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - password
              properties:
                userId:
                  type: string
                  description: user's id
                password:
                  type: string
                  description: new user password
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [true]
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /user/update-roles:
    put:
      security:
        - bearerAuth: []
      summary: update role (only for manager role)
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - roles
              properties:
                userId:
                  type: string
                  description: user's id
                roles:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    enum: [manager, staff]
                  description: roles (staff, manager)
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [true]
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong
  /user:
    delete:
      security:
        - bearerAuth: []
      summary: delete user (only for manager role)
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  type: string
                  description: user's id
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [true]
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /user/logout:
    post:
      security:
        - bearerAuth: []
      summary: logout
      tags: [Auth service]
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [true]
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /secret:
    get:
      summary: get secret
      tags: [Auth service]
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    required:
                      - secret
                    properties:
                      secret:
                        type: string
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /wallet/auth:
    post:
      summary: auth
      tags: [Auth service]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - chainId
                - signature
                - wallet
              properties:
                chainId:
                  type: number
                  description: chain id
                signature:
                  type: string
                wallet:
                  type: string
                  description: address
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    required:
                      - accessToken
                      - refreshToken
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /wallet/refresh:
    post:
      summary: refresh
      tags: [Auth service]
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    required:
                      - accessToken
                      - refreshToken
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong
  #end users

  #proxy
  /derby-soft/offers/search:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffersSearchRequest'
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffersSearchResponse'
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /derby-soft/offers/{offerId}/price:
    post:
      parameters:
        - in: path
          name: offerId
          schema:
            type: string
          required: true
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PricedOffer'
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong
  #end proxy

  #booking
  /booking/{address}:
    get:
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  offer:
                    $ref: '#/components/schemas/Deal'
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong

  /booking/{offerId}/guests:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Guest'
              minItems: 1
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [true]
                  data:
                    type: string
                    format: 'date-time'
        400:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        403:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        404:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        401:
          description: Handled Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    enum: [false]
        500:
          description: Some server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Something went wrong
  #end booking

  #health
  /health:
    get:
      responses:
        200:
          description: It's ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  commit:
                    type: string
  #end health
